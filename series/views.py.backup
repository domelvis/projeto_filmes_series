from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib import messages
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from django.urls import reverse_lazy
from django.db.models import Q
from .models import Serie
from .forms import SerieForm


class SerieListView(ListView):
    """
    View para listar todas as s√©ries com funcionalidade de busca e filtro por g√™nero.
    """
    model = Serie
    template_name = 'series/list.html'
    context_object_name = 'series'
    paginate_by = 12
    
    def get_queryset(self):
        """Filtra as s√©ries baseado na busca e g√™nero."""
        # Ordena as s√©ries por t√≠tulo por padr√£o para uma lista consistente
        queryset = Serie.objects.all().order_by('titulo') 
        search = self.request.GET.get('search')
        genero = self.request.GET.get('genero')
        
        if search:
            queryset = queryset.filter(
                Q(titulo__icontains=search) | 
                Q(descricao__icontains=search)
            )
        
        if genero:
            queryset = queryset.filter(genero=genero)
        
        return queryset
    
    def get_context_data(self, **kwargs):
        """Adiciona dados extras (g√™neros e termos de busca) ao contexto."""
        context = super().get_context_data(**kwargs)
        # Assumindo que Serie.GENERO_CHOICES est√° definido no seu modelo
        context['generos'] = Serie.GENERO_CHOICES
        context['search'] = self.request.GET.get('search', '')
        context['genero_selecionado'] = self.request.GET.get('genero', '')
        return context


class SerieDetailView(DetailView):
    """
    View para exibir os detalhes de uma s√©rie.
    """
    model = Serie
    template_name = 'series/detail.html'
    context_object_name = 'serie'
    
    def get_context_data(self, **kwargs):
        """Adiciona s√©ries relacionadas ao contexto."""
        context = super().get_context_data(**kwargs)
        serie = self.get_object()
        
        # Busca s√©ries do mesmo g√™nero, excluindo a atual
        series_relacionadas = Serie.objects.filter(
            genero=serie.genero
        ).exclude(pk=serie.pk).order_by('-avaliacao_media')[:4] # Ordena por avalia√ß√£o
        
        context['series_relacionadas'] = series_relacionadas
        return context


class SerieCreateView(LoginRequiredMixin, CreateView):
    """
    View para criar uma nova s√©rie. Requer que o usu√°rio esteja logado.
    """
    model = Serie
    form_class = SerieForm
    template_name = 'series/form.html'
    success_url = reverse_lazy('series:home')
    
    def form_valid(self, form):
        """Define o usu√°rio logado como criador e exibe mensagem de sucesso."""
        form.instance.criado_por = self.request.user
        messages.success(self.request, 'S√©rie criada com sucesso!')
        return super().form_valid(form)
    
    def get_context_data(self, **kwargs):
        """Adiciona t√≠tulos espec√≠ficos da p√°gina ao contexto."""
        context = super().get_context_data(**kwargs)
        context['titulo_pagina'] = 'Criar Nova S√©rie'
        context['botao_submit'] = 'Criar S√©rie'
        return context


class SerieUpdateView(LoginRequiredMixin, UpdateView):
    """
    View para editar uma s√©rie existente. Requer que o usu√°rio seja o criador.
    """
    model = Serie
    form_class = SerieForm
    template_name = 'series/form.html'
    success_url = reverse_lazy('series:home')
    
    def dispatch(self, request, *args, **kwargs):
        """Verifica permiss√£o: apenas o criador pode editar."""
        serie = self.get_object()
        if serie.criado_por != request.user:
            messages.error(request, 'Voc√™ n√£o tem permiss√£o para editar esta s√©rie.')
            return redirect('series:detail', pk=serie.pk)
        return super().dispatch(request, *args, **kwargs)
    
    def form_valid(self, form):
        """Exibe mensagem de sucesso ap√≥s a atualiza√ß√£o."""
        messages.success(self.request, 'S√©rie atualizada com sucesso!')
        return super().form_valid(form)
    
    def get_context_data(self, **kwargs):
        """Adiciona t√≠tulos espec√≠ficos da p√°gina ao contexto."""
        context = super().get_context_data(**kwargs)
        context['titulo_pagina'] = 'Editar S√©rie'
        context['botao_submit'] = 'Atualizar S√©rie'
        return context


class SerieDeleteView(LoginRequiredMixin, DeleteView):
    """
    View para deletar uma s√©rie. Requer que o usu√°rio seja o criador.
    """
    model = Serie
    template_name = 'series/confirm_delete.html'
    success_url = reverse_lazy('series:home')
    
    def dispatch(self, request, *args, **kwargs):
        """Verifica permiss√£o: apenas o criador pode deletar."""
        serie = self.get_object()
        if serie.criado_por != request.user:
            messages.error(request, 'Voc√™ n√£o tem permiss√£o para deletar esta s√©rie.')
            return redirect('series:detail', pk=serie.pk)
        return super().dispatch(request, *args, **kwargs)
    
    def delete(self, request, *args, **kwargs):
        """Executa a exclus√£o e exibe mensagem de sucesso."""
        messages.success(request, 'S√©rie deletada com sucesso!')
        return super().delete(request, *args, **kwargs)


def home(request):
    """
    View para a p√°gina inicial, exibindo as s√©ries mais recentes.
    """
    # üåü MELHORIA: Usa .order_by('-data_criacao') para garantir que as 6 s√©ries
    # sejam realmente as mais recentes. Ajuste 'data_criacao' para o nome do campo correto.
    series_recentes = Serie.objects.all().order_by('-data_criacao')[:6]
    
    context = {
        'series_recentes': series_recentes,
        'generos': Serie.GENERO_CHOICES,
    }
    return render(request, 'series/home.html', context)